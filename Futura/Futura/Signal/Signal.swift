/* Copyright 2018 Miquido

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License. */

/// Signal is an object that can be used to pass, transform and observe
/// continous stream of values and/or errors generated by some source.
/// Using handlers and transformations allows to easily manipulate
/// and inspect flow of data. Signal also allows to manage execution
/// by selecting threads manually if needed.
/// It does not use any cache or initial value mechanism so all tokens
/// passed before observation will never occour.
public class Signal<Value> {
    internal typealias Token = Result<Value>

    private var subscriptionID: Subscription.ID = 0
    private let privateCollector: SubscriptionCollector = .init()

    internal let mtx: Mutex.Pointer = Mutex.make(recursive: true)
    internal var subscribers: [(id: Subscription.ID, subscriber: Subscriber<Value>)] = .init()
    internal weak var collector: SubscriptionCollector?
    internal var finish: Error??
    internal var isFinished: Bool {
        Mutex.lock(mtx)
        defer { Mutex.unlock(mtx) }
        if case .some = finish {
            return true
        } else {
            return false
        }
    }

    internal init(collector: SubscriptionCollector?) {
        self.collector = collector
    }

    internal func subscribe(_ body: @escaping (Event) -> Void) -> Subscription? {
        Mutex.lock(mtx)
        defer { Mutex.unlock(mtx) }
        guard !isFinished else { return nil }
        let id = subscriptionID.next()
        let subscriber: Subscriber<Value> = .init(body: body)
        let subscription: Subscription = .init(deactivation: { [weak subscriber] in
            subscriber?.deactivate()
        }, unsubscribtion: { [weak self] in
            guard let self = self else { return }
            Mutex.lock(self.mtx)
            defer { Mutex.unlock(self.mtx) }
            if let idx = self.subscribers.firstIndex(where: { $0.id == id }) {
                self.subscribers.remove(at: idx)
            } else { /* do nothing */ }
        })
        subscribers.append((id: id, subscriber: subscriber))
        return subscription
    }

    internal func broadcast(_ token: Token) {
        Mutex.lock(mtx)
        defer { Mutex.unlock(mtx) }
        subscribers.forEach { $0.1.recieve(.token(token)) }
    }

    internal func finish(_ reason: Error? = nil) {
        Mutex.lock(mtx)
        defer { Mutex.unlock(mtx) }
        subscribers.forEach { $0.1.recieve(.finish(reason)) }
        finish = .some(reason)
        let sub = subscribers
        // cache until end of scope to prevent deallocation of subscribers while making changes in subscribers dictionary - prevents crash
        subscribers = .init()
    }

    internal func collect(_ subscribtion: Subscription?) {
        Mutex.lock(mtx)
        defer { Mutex.unlock(mtx) }
        guard let subscribtion = subscribtion else { return }
        if let collector = collector {
            collector.collect(subscribtion)
        } else {
            privateCollector.collect(subscribtion)
        }
    }

    deinit {
        finish()
        Mutex.destroy(mtx)
    }
}

extension Signal {
    internal enum Event {
        case token(Token)
        case finish(Error?)
    }
}

public extension Signal {
    /// Handler used to observe values passed through this Signal instance.
    ///
    /// - Parameter observer: Handler called every time Signal gets value.
    /// - Returns: Same Signal instance for eventual further chaining.
    @discardableResult
    func values(_ observer: @escaping (Value) -> Void) -> Signal {
        collect(subscribe { event in
            guard case let .token(.value(value)) = event else { return }
            observer(value)
        })
        return self
    }

    /// Handler used to observe errors passed through this Signal instance.
    ///
    /// - Parameter observer: Handler called every time Signal gets error.
    /// - Returns: Same Signal instance for eventual further chaining.
    @discardableResult
    func errors(_ observer: @escaping (Error) -> Void) -> Signal {
        collect(subscribe { event in
            guard case let .token(.error(value)) = event else { return }
            observer(value)
        })
        return self
    }

    #warning("TODO: add tokens handler - either value or error without reference")

    /// Handler used to observe finishing of this Signal by ending (without error).
    /// It will be called immediately with given context if
    /// signal already ended.
    ///
    /// - Parameter executionContext: Context used to execute handler.
    /// - Parameter observer: Handler called when Signal ends.
    /// - Returns: Same Signal instance for eventual further chaining.
    @discardableResult
    func ended(inContext executionContext: ExecutionContext = .undefined, _ observer: @escaping () -> Void) -> Signal {
        if let subscription = (subscribe { event in
            guard case .finish(.none) = event else { return }
            executionContext.execute {
                observer()
            }
        }) {
            collect(subscription)
        } else {
            guard case .some(.none) = finish else { return self }
            executionContext.execute {
                observer()
            }
        }
        return self
    }

    /// Handler used to observe finishing of this Signal by termination (with error).
    /// It will be called immediately with given context if
    /// signal already terminated.
    ///
    /// - Parameter executionContext: Context used to execute handler.
    /// - Parameter observer: Handler called when Signal terminates.
    /// - Returns: Same Signal instance for eventual further chaining.
    @discardableResult
    func terminated(inContext executionContext: ExecutionContext = .undefined, _ observer: @escaping (Error) -> Void) -> Signal {
        if let subscription = (subscribe { event in
            guard case let .finish(.some(reason)) = event else { return }
            executionContext.execute {
                observer(reason)
            }
        }) {
            collect(subscription)
        } else {
            guard case let .some(.some(reason)) = finish else { return self }
            executionContext.execute {
                observer(reason)
            }
        }
        return self
    }

    /// Handler used to observe finishing of this Signal either by ending or termination
    /// (with or without error). It will be called immediately with given context if
    /// signal already finished.
    ///
    /// - Parameter executionContext: Context used to execute handler.
    /// - Parameter observer: Handler called when Signal finishes.
    /// - Returns: Same Signal instance for eventual further chaining.
    @discardableResult
    func finished(inContext executionContext: ExecutionContext = .undefined, _ observer: @escaping () -> Void) -> Signal {
        if let subscription = (subscribe { event in
            guard case .finish = event else { return }
            executionContext.execute {
                observer()
            }
        }) {
            collect(subscription)
        } else {
            guard case .some = finish else { return self }
            executionContext.execute {
                observer()
            }
        }
        return self
    }
}
